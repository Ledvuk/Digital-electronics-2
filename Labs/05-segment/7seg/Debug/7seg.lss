<<<<<<< HEAD

7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000240  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e47  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008be  00000000  00000000  0000121b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b5  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039b  00000000  00000000  0000264d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name &= ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name |= (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name &= ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name |= (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 9f 00 	call	0x13e	; 0x13e <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 af 00 	call	0x15e	; 0x15e <SEG_update_shift_regs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	8a e1       	ldi	r24, 0x1A	; 26
  f0:	96 e0       	ldi	r25, 0x06	; 6
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x12>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x1c>
  fc:	00 00       	nop
    _delay_ms(2000);

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    for (uint8_t i=0; i<=9; i++)
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x24>
 102:	c1 e0       	ldi	r28, 0x01	; 1
    {
        SEG_update_shift_regs(i, 0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	8c 2f       	mov	r24, r28
 108:	0e 94 af 00 	call	0x15e	; 0x15e <SEG_update_shift_regs>
 10c:	2f e7       	ldi	r18, 0x7F	; 127
 10e:	8a e1       	ldi	r24, 0x1A	; 26
 110:	96 e0       	ldi	r25, 0x06	; 6
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x32>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x3c>
 11c:	00 00       	nop
        _delay_ms(2000);
        if (i==9)
 11e:	c9 30       	cpi	r28, 0x09	; 9
 120:	81 f3       	breq	.-32     	; 0x102 <main+0x22>
    SEG_update_shift_regs(3, 0);
    _delay_ms(2000);

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    for (uint8_t i=0; i<=9; i++)
 122:	cf 5f       	subi	r28, 0xFF	; 255
 124:	ca 30       	cpi	r28, 0x0A	; 10
 126:	70 f3       	brcs	.-36     	; 0x104 <main+0x24>
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x48>

0000012a <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 13e:	64 e0       	ldi	r22, 0x04	; 4
 140:	8a e2       	ldi	r24, 0x2A	; 42
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 148:	67 e0       	ldi	r22, 0x07	; 7
 14a:	8a e2       	ldi	r24, 0x2A	; 42
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	84 e2       	ldi	r24, 0x24	; 36
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 15c:	08 95       	ret

0000015e <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 164:	e8 2f       	mov	r30, r24
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ec 5f       	subi	r30, 0xFC	; 252
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 16e:	e6 2f       	mov	r30, r22
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e0 50       	subi	r30, 0x00	; 0
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 178:	64 e0       	ldi	r22, 0x04	; 4
 17a:	8b e2       	ldi	r24, 0x2B	; 43
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 182:	67 e0       	ldi	r22, 0x07	; 7
 184:	8b e2       	ldi	r24, 0x2B	; 43
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	85 e2       	ldi	r24, 0x25	; 37
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 196:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 0b00000001) == 0){GPIO_write_low(&PORTB, SEG_DATA);}
 198:	10 fd       	sbrc	r17, 0
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <SEG_update_shift_regs+0x4a>
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	85 e2       	ldi	r24, 0x25	; 37
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <SEG_update_shift_regs+0x54>
        else{GPIO_write_high(&PORTB, SEG_DATA);}
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	85 e2       	ldi	r24, 0x25	; 37
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <SEG_update_shift_regs+0x56>
 1b8:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
         GPIO_write_high(&PORTD, SEG_CLK);
 1ba:	67 e0       	ldi	r22, 0x07	; 7
 1bc:	8b e2       	ldi	r24, 0x2B	; 43
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <SEG_update_shift_regs+0x68>
 1ca:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 1cc:	67 e0       	ldi	r22, 0x07	; 7
 1ce:	8b e2       	ldi	r24, 0x2B	; 43
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 1d6:	16 95       	lsr	r17
 1d8:	c1 50       	subi	r28, 0x01	; 1
    
    // Wait 1 us

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1da:	f1 f6       	brne	.-68     	; 0x198 <SEG_update_shift_regs+0x3a>
 1dc:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((position & 0b00000001) == 1){GPIO_write_high(&PORTB, SEG_DATA);}
 1de:	d0 ff       	sbrs	r29, 0
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <SEG_update_shift_regs+0x90>
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	85 e2       	ldi	r24, 0x25	; 37
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <SEG_update_shift_regs+0x9a>
        else{GPIO_write_low(&PORTB, SEG_DATA);}
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <SEG_update_shift_regs+0x9c>
 1fe:	00 00       	nop
        // Wait 1 us
         _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	8b e2       	ldi	r24, 0x2B	; 43
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <SEG_update_shift_regs+0xae>
 210:	00 00       	nop
        // Wait 1 us
         _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 212:	67 e0       	ldi	r22, 0x07	; 7
 214:	8b e2       	ldi	r24, 0x2B	; 43
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 21c:	d6 95       	lsr	r29
 21e:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 220:	f1 f6       	brne	.-68     	; 0x1de <SEG_update_shift_regs+0x80>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
      GPIO_write_high(&PORTD, SEG_LATCH);
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	8b e2       	ldi	r24, 0x2B	; 43
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <SEG_update_shift_regs+0xd0>
 232:	00 00       	nop
    // Wait 1 us
     _delay_us(1);
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	08 95       	ret

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
=======

7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000240  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000240  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e47  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008be  00000000  00000000  0000121b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b4  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00002090  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b5  00000000  00000000  00002198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039b  00000000  00000000  0000264d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000029e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_13>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  8e:	0c 94 1e 01 	jmp	0x23c	; 0x23c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name &= ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name |= (1<<pin_num);   // Data Register
  96:	fc 01       	movw	r30, r24
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <GPIO_config_output+0xe>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <GPIO_config_output+0xa>
  a8:	24 2b       	or	r18, r20
  aa:	20 83       	st	Z, r18
  ac:	08 95       	ret

000000ae <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  ae:	fc 01       	movw	r30, r24
    *reg_name &= ~(1<<pin_num);
  b0:	90 81       	ld	r25, Z
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	02 c0       	rjmp	.+4      	; 0xbc <GPIO_write_low+0xe>
  b8:	22 0f       	add	r18, r18
  ba:	33 1f       	adc	r19, r19
  bc:	6a 95       	dec	r22
  be:	e2 f7       	brpl	.-8      	; 0xb8 <GPIO_write_low+0xa>
  c0:	20 95       	com	r18
  c2:	29 23       	and	r18, r25
  c4:	20 83       	st	Z, r18
  c6:	08 95       	ret

000000c8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name |= (1<<pin_num);
  c8:	fc 01       	movw	r30, r24
  ca:	40 81       	ld	r20, Z
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <GPIO_write_high+0xe>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <GPIO_write_high+0xa>
  da:	24 2b       	or	r18, r20
  dc:	20 83       	st	Z, r18
  de:	08 95       	ret

000000e0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  e0:	0e 94 9f 00 	call	0x13e	; 0x13e <SEG_init>

    // Test of SSD: display number '3' at position 0
    SEG_update_shift_regs(3, 0);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	0e 94 af 00 	call	0x15e	; 0x15e <SEG_update_shift_regs>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	8a e1       	ldi	r24, 0x1A	; 26
  f0:	96 e0       	ldi	r25, 0x06	; 6
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x12>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x1c>
  fc:	00 00       	nop
    _delay_ms(2000);

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    for (uint8_t i=0; i<=9; i++)
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x24>
 102:	c1 e0       	ldi	r28, 0x01	; 1
    {
        SEG_update_shift_regs(i, 0);
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	8c 2f       	mov	r24, r28
 108:	0e 94 af 00 	call	0x15e	; 0x15e <SEG_update_shift_regs>
 10c:	2f e7       	ldi	r18, 0x7F	; 127
 10e:	8a e1       	ldi	r24, 0x1A	; 26
 110:	96 e0       	ldi	r25, 0x06	; 6
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x32>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x3c>
 11c:	00 00       	nop
        _delay_ms(2000);
        if (i==9)
 11e:	c9 30       	cpi	r28, 0x09	; 9
 120:	81 f3       	breq	.-32     	; 0x102 <main+0x22>
    SEG_update_shift_regs(3, 0);
    _delay_ms(2000);

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    for (uint8_t i=0; i<=9; i++)
 122:	cf 5f       	subi	r28, 0xFF	; 255
 124:	ca 30       	cpi	r28, 0x0A	; 10
 126:	70 f3       	brcs	.-36     	; 0x104 <main+0x24>
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x48>

0000012a <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 13e:	64 e0       	ldi	r22, 0x04	; 4
 140:	8a e2       	ldi	r24, 0x2A	; 42
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 148:	67 e0       	ldi	r22, 0x07	; 7
 14a:	8a e2       	ldi	r24, 0x2A	; 42
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	84 e2       	ldi	r24, 0x24	; 36
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 4b 00 	call	0x96	; 0x96 <GPIO_config_output>
 15c:	08 95       	ret

0000015e <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
    uint8_t bit_number;
    segments = segment_value[segments];     // 0, 1, ..., 9
 164:	e8 2f       	mov	r30, r24
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ec 5f       	subi	r30, 0xFC	; 252
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	10 81       	ld	r17, Z
    position = segment_position[position];  // 0, 1, 2, 3
 16e:	e6 2f       	mov	r30, r22
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e0 50       	subi	r30, 0x00	; 0
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 178:	64 e0       	ldi	r22, 0x04	; 4
 17a:	8b e2       	ldi	r24, 0x2B	; 43
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 182:	67 e0       	ldi	r22, 0x07	; 7
 184:	8b e2       	ldi	r24, 0x2B	; 43
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	85 e2       	ldi	r24, 0x25	; 37
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 196:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((segments & 0b00000001) == 0){GPIO_write_low(&PORTB, SEG_DATA);}
 198:	10 fd       	sbrc	r17, 0
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <SEG_update_shift_regs+0x4a>
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	85 e2       	ldi	r24, 0x25	; 37
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <SEG_update_shift_regs+0x54>
        else{GPIO_write_high(&PORTB, SEG_DATA);}
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	85 e2       	ldi	r24, 0x25	; 37
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <SEG_update_shift_regs+0x56>
 1b8:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
         GPIO_write_high(&PORTD, SEG_CLK);
 1ba:	67 e0       	ldi	r22, 0x07	; 7
 1bc:	8b e2       	ldi	r24, 0x2B	; 43
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <SEG_update_shift_regs+0x68>
 1ca:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 1cc:	67 e0       	ldi	r22, 0x07	; 7
 1ce:	8b e2       	ldi	r24, 0x2B	; 43
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 1d6:	16 95       	lsr	r17
 1d8:	c1 50       	subi	r28, 0x01	; 1
    
    // Wait 1 us

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 1da:	f1 f6       	brne	.-68     	; 0x198 <SEG_update_shift_regs+0x3a>
 1dc:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if((position & 0b00000001) == 1){GPIO_write_high(&PORTB, SEG_DATA);}
 1de:	d0 ff       	sbrs	r29, 0
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <SEG_update_shift_regs+0x90>
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	85 e2       	ldi	r24, 0x25	; 37
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <SEG_update_shift_regs+0x9a>
        else{GPIO_write_low(&PORTB, SEG_DATA);}
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <SEG_update_shift_regs+0x9c>
 1fe:	00 00       	nop
        // Wait 1 us
         _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	8b e2       	ldi	r24, 0x2B	; 43
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	8a 95       	dec	r24
 20e:	f1 f7       	brne	.-4      	; 0x20c <SEG_update_shift_regs+0xae>
 210:	00 00       	nop
        // Wait 1 us
         _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 212:	67 e0       	ldi	r22, 0x07	; 7
 214:	8b e2       	ldi	r24, 0x2B	; 43
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 57 00 	call	0xae	; 0xae <GPIO_write_low>
        // Shift "position"
        position = position >> 1;
 21c:	d6 95       	lsr	r29
 21e:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 220:	f1 f6       	brne	.-68     	; 0x1de <SEG_update_shift_regs+0x80>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
      GPIO_write_high(&PORTD, SEG_LATCH);
 222:	64 e0       	ldi	r22, 0x04	; 4
 224:	8b e2       	ldi	r24, 0x2B	; 43
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 64 00 	call	0xc8	; 0xc8 <GPIO_write_high>
 22c:	85 e0       	ldi	r24, 0x05	; 5
 22e:	8a 95       	dec	r24
 230:	f1 f7       	brne	.-4      	; 0x22e <SEG_update_shift_regs+0xd0>
 232:	00 00       	nop
    // Wait 1 us
     _delay_us(1);
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	08 95       	ret

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
>>>>>>> 07ab9a1cde58b186db2b5fdc445050ecb5b1cea7
